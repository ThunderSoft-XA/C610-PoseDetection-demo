// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gstreamer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gstreamer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gstcfg {
class DataInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataInfo> {
} _DataInfo_default_instance_;
class DataSourceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataSource> {
} _DataSource_default_instance_;
class DataSourceSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataSourceSet> {
} _DataSourceSet_default_instance_;

namespace protobuf_gstreamer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, framerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataInfo, decode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, gst_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, gst_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, gst_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, gst_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, sink_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, data_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, neeed_calib_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, enable_ai_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSourceSet, data_source_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DataInfo)},
  { 11, -1, sizeof(DataSource)},
  { 24, -1, sizeof(DataSourceSet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataSourceSet_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gstreamer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _DataInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DataSource_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DataSourceSet_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DataInfo_default_instance_.DefaultConstruct();
  _DataSource_default_instance_.DefaultConstruct();
  _DataSourceSet_default_instance_.DefaultConstruct();
  _DataSource_default_instance_.get_mutable()->data_info_ = const_cast< ::gstcfg::DataInfo*>(
      ::gstcfg::DataInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017gstreamer.proto\022\006gstcfg\"m\n\010DataInfo\022\r\n"
      "\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\017\n\007channel\030"
      "\003 \001(\005\022\021\n\tframerate\030\004 \001(\005\022\016\n\006format\030\005 \001(\t"
      "\022\016\n\006decode\030\006 \001(\t\"\303\001\n\nDataSource\022\016\n\006gst_i"
      "d\030\001 \001(\005\022\020\n\010gst_name\030\002 \001(\t\022!\n\010gst_type\030\003 "
      "\001(\0162\017.gstcfg.GstType\022\020\n\010gst_path\030\004 \001(\t\022\021"
      "\n\tsink_name\030\005 \001(\t\022#\n\tdata_info\030\006 \001(\0132\020.g"
      "stcfg.DataInfo\022\023\n\013neeed_calib\030\007 \001(\010\022\021\n\te"
      "nable_ai\030\010 \001(\010\"8\n\rDataSourceSet\022\'\n\013data_"
      "source\030\001 \003(\0132\022.gstcfg.DataSource**\n\007GstT"
      "ype\022\t\n\005LOCAL\020\000\022\n\n\006CAMERA\020\001\022\010\n\004RTSP\020\002b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gstreamer.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gstreamer_2eproto

const ::google::protobuf::EnumDescriptor* GstType_descriptor() {
  protobuf_gstreamer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstreamer_2eproto::file_level_enum_descriptors[0];
}
bool GstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataInfo::kWidthFieldNumber;
const int DataInfo::kHeightFieldNumber;
const int DataInfo::kChannelFieldNumber;
const int DataInfo::kFramerateFieldNumber;
const int DataInfo::kFormatFieldNumber;
const int DataInfo::kDecodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataInfo::DataInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstreamer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gstcfg.DataInfo)
}
DataInfo::DataInfo(const DataInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.format().size() > 0) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  decode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.decode().size() > 0) {
    decode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decode_);
  }
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&framerate_) -
    reinterpret_cast<char*>(&width_) + sizeof(framerate_));
  // @@protoc_insertion_point(copy_constructor:gstcfg.DataInfo)
}

void DataInfo::SharedCtor() {
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  decode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&framerate_) -
    reinterpret_cast<char*>(&width_) + sizeof(framerate_));
  _cached_size_ = 0;
}

DataInfo::~DataInfo() {
  // @@protoc_insertion_point(destructor:gstcfg.DataInfo)
  SharedDtor();
}

void DataInfo::SharedDtor() {
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  decode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataInfo::descriptor() {
  protobuf_gstreamer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstreamer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataInfo& DataInfo::default_instance() {
  protobuf_gstreamer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataInfo* DataInfo::New(::google::protobuf::Arena* arena) const {
  DataInfo* n = new DataInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gstcfg.DataInfo)
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  decode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&framerate_) -
    reinterpret_cast<char*>(&width_) + sizeof(framerate_));
}

bool DataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gstcfg.DataInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 framerate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string format = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gstcfg.DataInfo.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string decode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->decode().data(), this->decode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gstcfg.DataInfo.decode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gstcfg.DataInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gstcfg.DataInfo)
  return false;
#undef DO_
}

void DataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gstcfg.DataInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // int32 channel = 3;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  // int32 framerate = 4;
  if (this->framerate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->framerate(), output);
  }

  // string format = 5;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataInfo.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->format(), output);
  }

  // string decode = 6;
  if (this->decode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->decode().data(), this->decode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataInfo.decode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->decode(), output);
  }

  // @@protoc_insertion_point(serialize_end:gstcfg.DataInfo)
}

::google::protobuf::uint8* DataInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gstcfg.DataInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // int32 channel = 3;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  // int32 framerate = 4;
  if (this->framerate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->framerate(), target);
  }

  // string format = 5;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataInfo.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->format(), target);
  }

  // string decode = 6;
  if (this->decode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->decode().data(), this->decode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataInfo.decode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->decode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gstcfg.DataInfo)
  return target;
}

size_t DataInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gstcfg.DataInfo)
  size_t total_size = 0;

  // string format = 5;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  // string decode = 6;
  if (this->decode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->decode());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  // int32 framerate = 4;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->framerate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gstcfg.DataInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DataInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gstcfg.DataInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gstcfg.DataInfo)
    MergeFrom(*source);
  }
}

void DataInfo::MergeFrom(const DataInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gstcfg.DataInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  if (from.decode().size() > 0) {

    decode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decode_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.framerate() != 0) {
    set_framerate(from.framerate());
  }
}

void DataInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gstcfg.DataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataInfo::CopyFrom(const DataInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gstcfg.DataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataInfo::IsInitialized() const {
  return true;
}

void DataInfo::Swap(DataInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataInfo::InternalSwap(DataInfo* other) {
  format_.Swap(&other->format_);
  decode_.Swap(&other->decode_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(channel_, other->channel_);
  std::swap(framerate_, other->framerate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataInfo::GetMetadata() const {
  protobuf_gstreamer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstreamer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataInfo

// int32 width = 1;
void DataInfo::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 DataInfo::width() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataInfo.width)
  return width_;
}
void DataInfo::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:gstcfg.DataInfo.width)
}

// int32 height = 2;
void DataInfo::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 DataInfo::height() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataInfo.height)
  return height_;
}
void DataInfo::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:gstcfg.DataInfo.height)
}

// int32 channel = 3;
void DataInfo::clear_channel() {
  channel_ = 0;
}
::google::protobuf::int32 DataInfo::channel() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataInfo.channel)
  return channel_;
}
void DataInfo::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:gstcfg.DataInfo.channel)
}

// int32 framerate = 4;
void DataInfo::clear_framerate() {
  framerate_ = 0;
}
::google::protobuf::int32 DataInfo::framerate() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataInfo.framerate)
  return framerate_;
}
void DataInfo::set_framerate(::google::protobuf::int32 value) {
  
  framerate_ = value;
  // @@protoc_insertion_point(field_set:gstcfg.DataInfo.framerate)
}

// string format = 5;
void DataInfo::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataInfo::format() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataInfo.format)
  return format_.GetNoArena();
}
void DataInfo::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gstcfg.DataInfo.format)
}
#if LANG_CXX11
void DataInfo::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gstcfg.DataInfo.format)
}
#endif
void DataInfo::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gstcfg.DataInfo.format)
}
void DataInfo::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gstcfg.DataInfo.format)
}
::std::string* DataInfo::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:gstcfg.DataInfo.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataInfo::release_format() {
  // @@protoc_insertion_point(field_release:gstcfg.DataInfo.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataInfo::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:gstcfg.DataInfo.format)
}

// string decode = 6;
void DataInfo::clear_decode() {
  decode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataInfo::decode() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataInfo.decode)
  return decode_.GetNoArena();
}
void DataInfo::set_decode(const ::std::string& value) {
  
  decode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gstcfg.DataInfo.decode)
}
#if LANG_CXX11
void DataInfo::set_decode(::std::string&& value) {
  
  decode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gstcfg.DataInfo.decode)
}
#endif
void DataInfo::set_decode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  decode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gstcfg.DataInfo.decode)
}
void DataInfo::set_decode(const char* value, size_t size) {
  
  decode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gstcfg.DataInfo.decode)
}
::std::string* DataInfo::mutable_decode() {
  
  // @@protoc_insertion_point(field_mutable:gstcfg.DataInfo.decode)
  return decode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataInfo::release_decode() {
  // @@protoc_insertion_point(field_release:gstcfg.DataInfo.decode)
  
  return decode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataInfo::set_allocated_decode(::std::string* decode) {
  if (decode != NULL) {
    
  } else {
    
  }
  decode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decode);
  // @@protoc_insertion_point(field_set_allocated:gstcfg.DataInfo.decode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSource::kGstIdFieldNumber;
const int DataSource::kGstNameFieldNumber;
const int DataSource::kGstTypeFieldNumber;
const int DataSource::kGstPathFieldNumber;
const int DataSource::kSinkNameFieldNumber;
const int DataSource::kDataInfoFieldNumber;
const int DataSource::kNeeedCalibFieldNumber;
const int DataSource::kEnableAiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSource::DataSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstreamer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gstcfg.DataSource)
}
DataSource::DataSource(const DataSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gst_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gst_name().size() > 0) {
    gst_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gst_name_);
  }
  gst_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gst_path().size() > 0) {
    gst_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gst_path_);
  }
  sink_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sink_name().size() > 0) {
    sink_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sink_name_);
  }
  if (from.has_data_info()) {
    data_info_ = new ::gstcfg::DataInfo(*from.data_info_);
  } else {
    data_info_ = NULL;
  }
  ::memcpy(&gst_id_, &from.gst_id_,
    reinterpret_cast<char*>(&enable_ai_) -
    reinterpret_cast<char*>(&gst_id_) + sizeof(enable_ai_));
  // @@protoc_insertion_point(copy_constructor:gstcfg.DataSource)
}

void DataSource::SharedCtor() {
  gst_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gst_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sink_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_info_, 0, reinterpret_cast<char*>(&enable_ai_) -
    reinterpret_cast<char*>(&data_info_) + sizeof(enable_ai_));
  _cached_size_ = 0;
}

DataSource::~DataSource() {
  // @@protoc_insertion_point(destructor:gstcfg.DataSource)
  SharedDtor();
}

void DataSource::SharedDtor() {
  gst_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gst_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sink_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete data_info_;
  }
}

void DataSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSource::descriptor() {
  protobuf_gstreamer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstreamer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataSource& DataSource::default_instance() {
  protobuf_gstreamer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataSource* DataSource::New(::google::protobuf::Arena* arena) const {
  DataSource* n = new DataSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:gstcfg.DataSource)
  gst_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gst_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_info_ != NULL) {
    delete data_info_;
  }
  data_info_ = NULL;
  ::memset(&gst_id_, 0, reinterpret_cast<char*>(&enable_ai_) -
    reinterpret_cast<char*>(&gst_id_) + sizeof(enable_ai_));
}

bool DataSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gstcfg.DataSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gst_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gst_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gst_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gst_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gst_name().data(), this->gst_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gstcfg.DataSource.gst_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gstcfg.GstType gst_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gst_type(static_cast< ::gstcfg::GstType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gst_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gst_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gst_path().data(), this->gst_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gstcfg.DataSource.gst_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sink_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sink_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sink_name().data(), this->sink_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gstcfg.DataSource.sink_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gstcfg.DataInfo data_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool neeed_calib = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &neeed_calib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_ai = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gstcfg.DataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gstcfg.DataSource)
  return false;
#undef DO_
}

void DataSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gstcfg.DataSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gst_id = 1;
  if (this->gst_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gst_id(), output);
  }

  // string gst_name = 2;
  if (this->gst_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gst_name().data(), this->gst_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataSource.gst_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gst_name(), output);
  }

  // .gstcfg.GstType gst_type = 3;
  if (this->gst_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gst_type(), output);
  }

  // string gst_path = 4;
  if (this->gst_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gst_path().data(), this->gst_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataSource.gst_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gst_path(), output);
  }

  // string sink_name = 5;
  if (this->sink_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sink_name().data(), this->sink_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataSource.sink_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sink_name(), output);
  }

  // .gstcfg.DataInfo data_info = 6;
  if (this->has_data_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->data_info_, output);
  }

  // bool neeed_calib = 7;
  if (this->neeed_calib() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->neeed_calib(), output);
  }

  // bool enable_ai = 8;
  if (this->enable_ai() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_ai(), output);
  }

  // @@protoc_insertion_point(serialize_end:gstcfg.DataSource)
}

::google::protobuf::uint8* DataSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gstcfg.DataSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gst_id = 1;
  if (this->gst_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gst_id(), target);
  }

  // string gst_name = 2;
  if (this->gst_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gst_name().data(), this->gst_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataSource.gst_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gst_name(), target);
  }

  // .gstcfg.GstType gst_type = 3;
  if (this->gst_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gst_type(), target);
  }

  // string gst_path = 4;
  if (this->gst_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gst_path().data(), this->gst_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataSource.gst_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gst_path(), target);
  }

  // string sink_name = 5;
  if (this->sink_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sink_name().data(), this->sink_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gstcfg.DataSource.sink_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sink_name(), target);
  }

  // .gstcfg.DataInfo data_info = 6;
  if (this->has_data_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->data_info_, deterministic, target);
  }

  // bool neeed_calib = 7;
  if (this->neeed_calib() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->neeed_calib(), target);
  }

  // bool enable_ai = 8;
  if (this->enable_ai() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_ai(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gstcfg.DataSource)
  return target;
}

size_t DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gstcfg.DataSource)
  size_t total_size = 0;

  // string gst_name = 2;
  if (this->gst_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gst_name());
  }

  // string gst_path = 4;
  if (this->gst_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gst_path());
  }

  // string sink_name = 5;
  if (this->sink_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sink_name());
  }

  // .gstcfg.DataInfo data_info = 6;
  if (this->has_data_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_info_);
  }

  // int32 gst_id = 1;
  if (this->gst_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gst_id());
  }

  // .gstcfg.GstType gst_type = 3;
  if (this->gst_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gst_type());
  }

  // bool neeed_calib = 7;
  if (this->neeed_calib() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_ai = 8;
  if (this->enable_ai() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gstcfg.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gstcfg.DataSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gstcfg.DataSource)
    MergeFrom(*source);
  }
}

void DataSource::MergeFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gstcfg.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gst_name().size() > 0) {

    gst_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gst_name_);
  }
  if (from.gst_path().size() > 0) {

    gst_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gst_path_);
  }
  if (from.sink_name().size() > 0) {

    sink_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sink_name_);
  }
  if (from.has_data_info()) {
    mutable_data_info()->::gstcfg::DataInfo::MergeFrom(from.data_info());
  }
  if (from.gst_id() != 0) {
    set_gst_id(from.gst_id());
  }
  if (from.gst_type() != 0) {
    set_gst_type(from.gst_type());
  }
  if (from.neeed_calib() != 0) {
    set_neeed_calib(from.neeed_calib());
  }
  if (from.enable_ai() != 0) {
    set_enable_ai(from.enable_ai());
  }
}

void DataSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gstcfg.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSource::CopyFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gstcfg.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSource::IsInitialized() const {
  return true;
}

void DataSource::Swap(DataSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSource::InternalSwap(DataSource* other) {
  gst_name_.Swap(&other->gst_name_);
  gst_path_.Swap(&other->gst_path_);
  sink_name_.Swap(&other->sink_name_);
  std::swap(data_info_, other->data_info_);
  std::swap(gst_id_, other->gst_id_);
  std::swap(gst_type_, other->gst_type_);
  std::swap(neeed_calib_, other->neeed_calib_);
  std::swap(enable_ai_, other->enable_ai_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSource::GetMetadata() const {
  protobuf_gstreamer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstreamer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataSource

// int32 gst_id = 1;
void DataSource::clear_gst_id() {
  gst_id_ = 0;
}
::google::protobuf::int32 DataSource::gst_id() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataSource.gst_id)
  return gst_id_;
}
void DataSource::set_gst_id(::google::protobuf::int32 value) {
  
  gst_id_ = value;
  // @@protoc_insertion_point(field_set:gstcfg.DataSource.gst_id)
}

// string gst_name = 2;
void DataSource::clear_gst_name() {
  gst_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataSource::gst_name() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataSource.gst_name)
  return gst_name_.GetNoArena();
}
void DataSource::set_gst_name(const ::std::string& value) {
  
  gst_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gstcfg.DataSource.gst_name)
}
#if LANG_CXX11
void DataSource::set_gst_name(::std::string&& value) {
  
  gst_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gstcfg.DataSource.gst_name)
}
#endif
void DataSource::set_gst_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gst_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gstcfg.DataSource.gst_name)
}
void DataSource::set_gst_name(const char* value, size_t size) {
  
  gst_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gstcfg.DataSource.gst_name)
}
::std::string* DataSource::mutable_gst_name() {
  
  // @@protoc_insertion_point(field_mutable:gstcfg.DataSource.gst_name)
  return gst_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataSource::release_gst_name() {
  // @@protoc_insertion_point(field_release:gstcfg.DataSource.gst_name)
  
  return gst_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataSource::set_allocated_gst_name(::std::string* gst_name) {
  if (gst_name != NULL) {
    
  } else {
    
  }
  gst_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gst_name);
  // @@protoc_insertion_point(field_set_allocated:gstcfg.DataSource.gst_name)
}

// .gstcfg.GstType gst_type = 3;
void DataSource::clear_gst_type() {
  gst_type_ = 0;
}
::gstcfg::GstType DataSource::gst_type() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataSource.gst_type)
  return static_cast< ::gstcfg::GstType >(gst_type_);
}
void DataSource::set_gst_type(::gstcfg::GstType value) {
  
  gst_type_ = value;
  // @@protoc_insertion_point(field_set:gstcfg.DataSource.gst_type)
}

// string gst_path = 4;
void DataSource::clear_gst_path() {
  gst_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataSource::gst_path() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataSource.gst_path)
  return gst_path_.GetNoArena();
}
void DataSource::set_gst_path(const ::std::string& value) {
  
  gst_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gstcfg.DataSource.gst_path)
}
#if LANG_CXX11
void DataSource::set_gst_path(::std::string&& value) {
  
  gst_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gstcfg.DataSource.gst_path)
}
#endif
void DataSource::set_gst_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gst_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gstcfg.DataSource.gst_path)
}
void DataSource::set_gst_path(const char* value, size_t size) {
  
  gst_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gstcfg.DataSource.gst_path)
}
::std::string* DataSource::mutable_gst_path() {
  
  // @@protoc_insertion_point(field_mutable:gstcfg.DataSource.gst_path)
  return gst_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataSource::release_gst_path() {
  // @@protoc_insertion_point(field_release:gstcfg.DataSource.gst_path)
  
  return gst_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataSource::set_allocated_gst_path(::std::string* gst_path) {
  if (gst_path != NULL) {
    
  } else {
    
  }
  gst_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gst_path);
  // @@protoc_insertion_point(field_set_allocated:gstcfg.DataSource.gst_path)
}

// string sink_name = 5;
void DataSource::clear_sink_name() {
  sink_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataSource::sink_name() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataSource.sink_name)
  return sink_name_.GetNoArena();
}
void DataSource::set_sink_name(const ::std::string& value) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gstcfg.DataSource.sink_name)
}
#if LANG_CXX11
void DataSource::set_sink_name(::std::string&& value) {
  
  sink_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gstcfg.DataSource.sink_name)
}
#endif
void DataSource::set_sink_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gstcfg.DataSource.sink_name)
}
void DataSource::set_sink_name(const char* value, size_t size) {
  
  sink_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gstcfg.DataSource.sink_name)
}
::std::string* DataSource::mutable_sink_name() {
  
  // @@protoc_insertion_point(field_mutable:gstcfg.DataSource.sink_name)
  return sink_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataSource::release_sink_name() {
  // @@protoc_insertion_point(field_release:gstcfg.DataSource.sink_name)
  
  return sink_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataSource::set_allocated_sink_name(::std::string* sink_name) {
  if (sink_name != NULL) {
    
  } else {
    
  }
  sink_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sink_name);
  // @@protoc_insertion_point(field_set_allocated:gstcfg.DataSource.sink_name)
}

// .gstcfg.DataInfo data_info = 6;
bool DataSource::has_data_info() const {
  return this != internal_default_instance() && data_info_ != NULL;
}
void DataSource::clear_data_info() {
  if (GetArenaNoVirtual() == NULL && data_info_ != NULL) delete data_info_;
  data_info_ = NULL;
}
const ::gstcfg::DataInfo& DataSource::data_info() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataSource.data_info)
  return data_info_ != NULL ? *data_info_
                         : *::gstcfg::DataInfo::internal_default_instance();
}
::gstcfg::DataInfo* DataSource::mutable_data_info() {
  
  if (data_info_ == NULL) {
    data_info_ = new ::gstcfg::DataInfo;
  }
  // @@protoc_insertion_point(field_mutable:gstcfg.DataSource.data_info)
  return data_info_;
}
::gstcfg::DataInfo* DataSource::release_data_info() {
  // @@protoc_insertion_point(field_release:gstcfg.DataSource.data_info)
  
  ::gstcfg::DataInfo* temp = data_info_;
  data_info_ = NULL;
  return temp;
}
void DataSource::set_allocated_data_info(::gstcfg::DataInfo* data_info) {
  delete data_info_;
  data_info_ = data_info;
  if (data_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gstcfg.DataSource.data_info)
}

// bool neeed_calib = 7;
void DataSource::clear_neeed_calib() {
  neeed_calib_ = false;
}
bool DataSource::neeed_calib() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataSource.neeed_calib)
  return neeed_calib_;
}
void DataSource::set_neeed_calib(bool value) {
  
  neeed_calib_ = value;
  // @@protoc_insertion_point(field_set:gstcfg.DataSource.neeed_calib)
}

// bool enable_ai = 8;
void DataSource::clear_enable_ai() {
  enable_ai_ = false;
}
bool DataSource::enable_ai() const {
  // @@protoc_insertion_point(field_get:gstcfg.DataSource.enable_ai)
  return enable_ai_;
}
void DataSource::set_enable_ai(bool value) {
  
  enable_ai_ = value;
  // @@protoc_insertion_point(field_set:gstcfg.DataSource.enable_ai)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSourceSet::kDataSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSourceSet::DataSourceSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gstreamer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gstcfg.DataSourceSet)
}
DataSourceSet::DataSourceSet(const DataSourceSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_source_(from.data_source_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gstcfg.DataSourceSet)
}

void DataSourceSet::SharedCtor() {
  _cached_size_ = 0;
}

DataSourceSet::~DataSourceSet() {
  // @@protoc_insertion_point(destructor:gstcfg.DataSourceSet)
  SharedDtor();
}

void DataSourceSet::SharedDtor() {
}

void DataSourceSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSourceSet::descriptor() {
  protobuf_gstreamer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstreamer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataSourceSet& DataSourceSet::default_instance() {
  protobuf_gstreamer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataSourceSet* DataSourceSet::New(::google::protobuf::Arena* arena) const {
  DataSourceSet* n = new DataSourceSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSourceSet::Clear() {
// @@protoc_insertion_point(message_clear_start:gstcfg.DataSourceSet)
  data_source_.Clear();
}

bool DataSourceSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gstcfg.DataSourceSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gstcfg.DataSource data_source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gstcfg.DataSourceSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gstcfg.DataSourceSet)
  return false;
#undef DO_
}

void DataSourceSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gstcfg.DataSourceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gstcfg.DataSource data_source = 1;
  for (unsigned int i = 0, n = this->data_source_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_source(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gstcfg.DataSourceSet)
}

::google::protobuf::uint8* DataSourceSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gstcfg.DataSourceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gstcfg.DataSource data_source = 1;
  for (unsigned int i = 0, n = this->data_source_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data_source(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gstcfg.DataSourceSet)
  return target;
}

size_t DataSourceSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gstcfg.DataSourceSet)
  size_t total_size = 0;

  // repeated .gstcfg.DataSource data_source = 1;
  {
    unsigned int count = this->data_source_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_source(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSourceSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gstcfg.DataSourceSet)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSourceSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSourceSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gstcfg.DataSourceSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gstcfg.DataSourceSet)
    MergeFrom(*source);
  }
}

void DataSourceSet::MergeFrom(const DataSourceSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gstcfg.DataSourceSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_source_.MergeFrom(from.data_source_);
}

void DataSourceSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gstcfg.DataSourceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceSet::CopyFrom(const DataSourceSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gstcfg.DataSourceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceSet::IsInitialized() const {
  return true;
}

void DataSourceSet::Swap(DataSourceSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSourceSet::InternalSwap(DataSourceSet* other) {
  data_source_.InternalSwap(&other->data_source_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSourceSet::GetMetadata() const {
  protobuf_gstreamer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gstreamer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataSourceSet

// repeated .gstcfg.DataSource data_source = 1;
int DataSourceSet::data_source_size() const {
  return data_source_.size();
}
void DataSourceSet::clear_data_source() {
  data_source_.Clear();
}
const ::gstcfg::DataSource& DataSourceSet::data_source(int index) const {
  // @@protoc_insertion_point(field_get:gstcfg.DataSourceSet.data_source)
  return data_source_.Get(index);
}
::gstcfg::DataSource* DataSourceSet::mutable_data_source(int index) {
  // @@protoc_insertion_point(field_mutable:gstcfg.DataSourceSet.data_source)
  return data_source_.Mutable(index);
}
::gstcfg::DataSource* DataSourceSet::add_data_source() {
  // @@protoc_insertion_point(field_add:gstcfg.DataSourceSet.data_source)
  return data_source_.Add();
}
::google::protobuf::RepeatedPtrField< ::gstcfg::DataSource >*
DataSourceSet::mutable_data_source() {
  // @@protoc_insertion_point(field_mutable_list:gstcfg.DataSourceSet.data_source)
  return &data_source_;
}
const ::google::protobuf::RepeatedPtrField< ::gstcfg::DataSource >&
DataSourceSet::data_source() const {
  // @@protoc_insertion_point(field_list:gstcfg.DataSourceSet.data_source)
  return data_source_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gstcfg

// @@protoc_insertion_point(global_scope)
